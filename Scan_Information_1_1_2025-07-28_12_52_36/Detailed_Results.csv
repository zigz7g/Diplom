Vulnerability,Language,Description,Recommendations,Links,File,Line,Severity Level,Correlation with DAST,Status,Trace,Event log,Vulnerability UUID
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/core-templates/steps/enable-internal-sources.yml,21,Critical,Unconfirmed,Not processed,,,0c25ee0b-39e1-403b-96ad-cf4c389541b8
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/core-templates/steps/enable-internal-sources.yml,38,Critical,Unconfirmed,Not processed,,,dac1e602-5f9a-41de-9ee3-f85374b6557c
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/core-templates/steps/get-federated-access-token.yml,10,Critical,Unconfirmed,Not processed,,,ea06417c-7d29-4b10-b8bf-6ac35559dae1
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/core-templates/steps/get-federated-access-token.yml,42,Critical,Unconfirmed,Not processed,,,091ab2a8-ef8f-41a0-99a4-1d6852ea7f90
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/core-templates/steps/retain-build.yml,5,Critical,Unconfirmed,Not processed,,,cf0d66c8-770d-4121-ac1c-7423d037d85f
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/init-tools-native.sh,156,Critical,Unconfirmed,Not processed,,,08bbf192-9976-4523-8bf1-9db300f93f01
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/common/internal-feed-operations.sh,100,Critical,Unconfirmed,Not processed,,,f2d36e4a-4f40-4330-ad86-fb791a0c68dc
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/pipelines/templates/jobs/vmr-build.yml,393,Critical,Unconfirmed,Not processed,,,9bb5d3dc-95b5-45e2-8e2c-92f55692eed6
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/eng/pipelines/templates/variables/sdk-defaults.yml,14,Critical,Unconfirmed,Not processed,,,bdcc9db9-089d-4535-89bd-6d5bbd63706e
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/SourceBuild/content/.vault-config/vmr-pipeline-secrets.yaml,10,Critical,Unconfirmed,Not processed,,,c49c7a18-d4bf-4f38-bd97-ad2a54ad2286
Empty encryption key,Config files,"Empty encryption key in a configuration file can compromise the application. It is very difficult to eliminate the security risks related to hardcoded empty keys. The fact that some data is encrypted with an empty key is at least known to every application developer. Moreover, after the application is installed, the empty key can be removed from the code only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to learn about the encryption with an empty key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use empty encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://wiki.owasp.org/index.php/Use_of_hard-coded_cryptographic_key,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/.vsts-ci.yml,31,Critical,Unconfirmed,Not processed,,,b10e0117-5185-4a92-9b6b-4f3dbc8dc97e
Hardcoded encryption key in config,Config files,"Encryption key is hardcoded in a configuration file. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords or keys is extremely difficult. This data is available at least to every developer of the application. Moreover, after the application is installed, removing password or key from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to find out the value of the key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use hardcoded encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/321.html,https://owasp.org/www-project-mobile-top-10/,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://github.com/RNCryptor/RNCryptor/blob/master/README.md,https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography,https://cwe.mitre.org/data/definitions/798.html",sdk-9.0.200/eng/common/pipeline-logging-functions.ps1,7,Critical,Unconfirmed,Not processed,,,5b84be4f-2e67-4d9d-8d4b-99bfcf51d53f
Hardcoded encryption key in config,Config files,"Encryption key is hardcoded in a configuration file. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords or keys is extremely difficult. This data is available at least to every developer of the application. Moreover, after the application is installed, removing password or key from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to find out the value of the key. Insufficient Cryptography vulnerabilities take the fifth place in the “OWASP Top 10 2016” mobile application vulnerabilities ranking.","Do not use hardcoded encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/321.html,https://owasp.org/www-project-mobile-top-10/,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://github.com/RNCryptor/RNCryptor/blob/master/README.md,https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography,https://cwe.mitre.org/data/definitions/798.html",sdk-9.0.200/src/Installer/redist-installer/packaging/windows/variables.wxi,36,Critical,Unconfirmed,Not processed,,,7f1bd67f-91ea-46a8-9fdb-bfcbf8799480
Null encryption key,Config files,"The encryption key with a value of NULL can result in an application compromise. You should never use a null encryption key, since it significantly reduces the protection afforded by a good encryption algorithm, but also makes fixing the problem difficult. Information that it uses a null key encryption is accessible to at least every developer of the application. After the application is installed, the null encryption key can not be removed without updating the software. If an account that is protected by a NULL encryption key is compromised, system administrators will be forced either to neglect the safety, or to restrict the access to the application. Constant strings are easily extracted from the compiled application by decompilers. Therefore, it is not necessary for an attacker to have access to the source code, to determine that a null encryption key is used. Cryptographic Failures vulnerabilities take the second place in the “OWASP Top 10 2021” web-application vulnerabilities ranking.","Use non-null encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",sdk-9.0.200/src/Cli/dotnet-new3/component_registry.json,3,Critical,Unconfirmed,Not processed,,,2d41af0f-fdac-472d-b48d-e044093d7df3
Null encryption key,Config files,"The encryption key with a value of NULL can result in an application compromise. You should never use a null encryption key, since it significantly reduces the protection afforded by a good encryption algorithm, but also makes fixing the problem difficult. Information that it uses a null key encryption is accessible to at least every developer of the application. After the application is installed, the null encryption key can not be removed without updating the software. If an account that is protected by a NULL encryption key is compromised, system administrators will be forced either to neglect the safety, or to restrict the access to the application. Constant strings are easily extracted from the compiled application by decompilers. Therefore, it is not necessary for an attacker to have access to the source code, to determine that a null encryption key is used. Cryptographic Failures vulnerabilities take the second place in the “OWASP Top 10 2021” web-application vulnerabilities ranking.","Use non-null encryption keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/321.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/1032.html,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",sdk-9.0.200/src/Cli/dotnet-new3/component_registry.json,4,Critical,Unconfirmed,Not processed,,,5130bff5-57fa-429c-baa4-4e8a1dc974fc
Password hardcoded in configuration file,Config files,Saving a plaintext password inside the configuration file can lead to a system vulnerability.,"The password should never be a plaintext inside the configuration file. At best, the password must be entered by the system administrator when it is started. If such a method is not possible, then it is recommended that the password be artificially confused so that as much system resources as possible can be used to decrypt the password.","https://owasp.org/www-community/vulnerabilities/Password_Plaintext_Storage,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html,https://cwe.mitre.org/data/definitions/256.html,https://cwe.mitre.org/data/definitions/260.html",sdk-9.0.200/test/Microsoft.NET.Build.Containers.IntegrationTests/AuthenticatedRegistry/auth/htpasswd,1,Critical,Unconfirmed,Not processed,,,3fbae3d2-d980-4093-8e9c-023783a936b7
Password hardcoded in configuration file,Config files,Saving a plaintext password inside the configuration file can lead to a system vulnerability.,"The password should never be a plaintext inside the configuration file. At best, the password must be entered by the system administrator when it is started. If such a method is not possible, then it is recommended that the password be artificially confused so that as much system resources as possible can be used to decrypt the password.","https://owasp.org/www-community/vulnerabilities/Password_Plaintext_Storage,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html,https://cwe.mitre.org/data/definitions/256.html,https://cwe.mitre.org/data/definitions/260.html",sdk-9.0.200/test/TestAssets/TestPackages/dotnet-new/test_templates/PostActions/AddJsonProperty/WithExistingProject/ExistingProject/deployment.template.json,15,Critical,Unconfirmed,Not processed,,,e26e2f84-5613-43a4-a5a3-8dd1a9144259
Hardcoded encryption key,C#,"Key is explicitly defined in the source code. This may lead to an application data compromise. Eliminating the security risks related to keys being specified in the source code is extremely difficult. Such keys are available at least to every developer of the application. Moreover, after the application is installed, removing the key from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have access to the source code to find out the value of the key. Sensitive Data Exposure vulnerabilities take the third place in the “OWASP Top 10 2017” web-application vulnerabilities ranking.","Do not use hardcoded keys. To generate the keys, it is recommended to use a cryptographically secure PRNG (pseudorandom number generators). To store keys, you need to use special solutions, such as Hardware Security Modules. For security reasons, you need to regularly update your keys.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/321.html,https://cwe.mitre.org/data/definitions/1032.html,https://cwe.mitre.org/data/definitions/798.html",sdk-9.0.200/src/Cli/Microsoft.TemplateEngine.Cli/HostSpecificTemplateData.cs,12,Critical,Unconfirmed,Not processed,,,d4be1355-f3ba-4321-9045-f22da7aa452f
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/BuiltInTools/dotnet-watch/EnvironmentVariables.cs,16,Critical,Unconfirmed,Not processed,,,2c391646-ab91-494d-9cab-22a7cd932492
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/Cli/dotnet/commands/dotnet-test/CliConstants.cs,23,Critical,Unconfirmed,Not processed,,,cc930976-6844-4591-a1c3-98f75fa89987
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/Containers/Microsoft.NET.Build.Containers/ContainerHelpers.cs,22,Critical,Unconfirmed,Not processed,,,d1abd468-9cff-4662-80e6-26bb45ad1dfa
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/Containers/Microsoft.NET.Build.Containers/ContainerHelpers.cs,23,Critical,Unconfirmed,Not processed,,,c094e4b3-2ba5-46d4-86b3-38d5a8d872ed
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/Containers/Microsoft.NET.Build.Containers/ContainerHelpers.cs,26,Critical,Unconfirmed,Not processed,,,4eaa9eeb-1a25-4cc2-84cb-a3527330c2c0
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/Containers/Microsoft.NET.Build.Containers/ContainerHelpers.cs,29,Critical,Unconfirmed,Not processed,,,c61b2f22-b9db-4e9a-811e-3cbea5cb33a5
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/Containers/Microsoft.NET.Build.Containers/VSHostObject.cs,12,Critical,Unconfirmed,Not processed,,,a7714f48-7d1b-4221-af3d-0780d2fb8f6f
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/StaticWebAssetsSdk/Tasks/Compression/DiscoverPrecompressedAssets.cs,10,Critical,Unconfirmed,Not processed,,,e3f96262-9093-4226-822f-f5975463be42
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/src/WebSdk/Publish/Tasks/MsDeploy/VSMSDeployHostObject.cs,16,Critical,Unconfirmed,Not processed,,,9f768ed3-c67a-41e8-845f-a87b93854a44
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/test/Microsoft.NET.Build.Containers.UnitTests/AuthHandshakeMessageHandlerTests.cs,80,Critical,Unconfirmed,Not processed,,,a80474c5-1309-4a2f-9c68-1ff440117f78
Hardcoded password,C#,"Password is explicitly defined in the source code. This may lead to an application data compromise. Eliminating security risks related to hardcoded passwords is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing password from its code is possible only via an update. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety, or to restrict the access to the application.","Store not passwords but values of cryptographically secure hash function from the password. Use specialized hash functions designed for this purpose (bcrypt, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist attacks which use rainbow tables. If the hardcoded password is used for the initial authorization, provide the special authentication mode for this purpose in which the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or in a database. Secure the encryption key. If encryption is not possible, limit the access to the repository as much as possible. For secure password storage on the platforms using the SQLite database, use the SQLCipher extension.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",sdk-9.0.200/test/Microsoft.NET.Sdk.Publish.Tasks.Tests/Tasks/ZipDeploy/ZipDeploymentStatusTests.cs,16,Critical,Unconfirmed,Not processed,,,c4b684c6-23e4-452b-8aab-7b4ef567042e
XML injection,C#,"The application writes data from an untrusted source to XML file. This allows an attacker to change the structure and content of the file. Applications typically use XML to store data or for messaging. In the first case, XML file is treated as a database and can contain valuable data. Web applications can also use massaging via XML for valuable data exchange. An attacker who has the ability to write data to the XML document can change its semantics. In the most harmless case he/she can inject excess tags into the document, whereby the XML-parser exits with an error. In more serious cases, an attacker can add XML elements changing the authentication data, change data (such as prices, if we are talking about a database of a store). In some cases, XML Injection can lead to cross-site scripting (XSS) and remote code execution.","Do not create tags and attributes whose names are derived from data from an untrusted source (e.g., user input). Encode (XML entity encode) data entered by a user before writing it to the XML-document. Wrap data from an untrusted source in the CDATA tag.","https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection,https://css.csail.mit.edu/6.858/2014/readings/owasp-top-10.pdf,https://cwe.mitre.org/data/definitions/91.html,https://cwe.mitre.org/data/definitions/1027.html",sdk-9.0.200/test/dotnet-pack.Tests/PackTests.cs,224,Critical,Unconfirmed,Not processed,[sdk-9.0.200/test/dotnet-pack.Tests/PackTests.cs:224]-[sdk-9.0.200/test/dotnet-pack.Tests/PackTests.cs:224],,d9cb0358-6aef-4335-991e-b18f943996e5
